{"version":"6","defaultTimeframe":{"from":"now()-2h","to":"now()"},"sections":[{"id":"92c16eac-9eea-4f35-8377-bcb2e2346316","type":"markdown","markdown":"# Adv. DQL - Lab 4 - **Instructor Copy**\n---"},{"id":"332367a4-966e-47e3-8873-cf1ee34aa56a","type":"markdown","markdown":"## 4.1 General DQL"},{"id":"e8c913b4-dec6-4cdf-b4c5-8b8e85f7c454","type":"markdown","markdown":"### 4.1.1 Host Health Tile: \n\nOne of the templated features in classic Dynatrace dashboards is the health tile displaying green or red depending on if the entity was impacted by a problem. Use DQL to duplicate this behaviour by implementing a Host Health tile.\n\n**Task**:\n\n- Find a way to implement the host health tile using DQL\n- You may want to add a status field indicating if the host has a problem\n- You may also want to add a custom colour scheme that references the status"},{"id":"0ec2fca5-c8d4-41f1-aa60-c2a121ef85c1","type":"dql","showTitle":false,"filterSegments":[],"drilldownPath":[],"showInput":true,"height":235,"previousFilterSegments":[],"state":{"input":{"value":"fetch dt.entity.host\n| fields entity.name, id\n| lookup [\n  fetch dt.davis.problems\n  | filter event.status==\"ACTIVE\" and dt.davis.is_duplicate==false\n  | expand affected_entity_ids\n], sourceField:id, lookupField:affected_entity_ids, fields:{event.status, display_id, event.start, event.id}\n| fieldsAdd status=if(event.status==\"ACTIVE\", \"Problem\", else: \"OK\")\n| sort event.status asc, entity.name","timeframe":{"from":"now()-2h","to":"now()"}},"visualization":"honeycomb","querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"result":{"code":200,"value":{"records":[{"entity.name":"i-0366a836f9aee5f51","id":"HOST-B63426FD95D1B9EC","event.status":null,"display_id":null,"event.start":null,"event.id":null,"status":"OK"},{"entity.name":"i-061c82f7d0e098b13","id":"HOST-273EF88BEFED7C70","event.status":null,"display_id":null,"event.start":null,"event.id":null,"status":"OK"},{"entity.name":"i-0cf1f2730768b7250","id":"HOST-A0D0407E9F620807","event.status":null,"display_id":null,"event.start":null,"event.id":null,"status":"OK"},{"entity.name":"i-0d611f7adcde23fd3","id":"HOST-5143BFBC3C40AC2D","event.status":null,"display_id":null,"event.start":null,"event.id":null,"status":"OK"},{"entity.name":"lnx1-demo.c.dynatrace-demoability.internal","id":"HOST-CDD2F9BB85A2DA68","event.status":null,"display_id":null,"event.start":null,"event.id":null,"status":"OK"}],"metadata":{"grail":{"canonicalQuery":"fetch dt.entity.host\n| fields entity.name, id\n| lookup \n\t[\n\t\tfetch dt.davis.problems\n\t\t| filter event.status == \"ACTIVE\" AND dt.davis.is_duplicate == FALSE\n\t\t| expand affected_entity_ids\n\t], sourceField:id, lookupField:affected_entity_ids, fields:{event.status, display_id, event.start, event.id}\n| fieldsAdd status = if(event.status == \"ACTIVE\", \"Problem\", else:\"OK\")\n| sort event.status, entity.name","timezone":"Europe/London","query":"fetch dt.entity.host\n| fields entity.name, id\n| lookup [\n  fetch dt.davis.problems\n  | filter event.status==\"ACTIVE\" and dt.davis.is_duplicate==false\n  | expand affected_entity_ids\n], sourceField:id, lookupField:affected_entity_ids, fields:{event.status, display_id, event.start, event.id}\n| fieldsAdd status=if(event.status==\"ACTIVE\", \"Problem\", else: \"OK\")\n| sort event.status asc, entity.name","scannedRecords":341,"dqlVersion":"V1_0","scannedBytes":76364,"scannedDataPoints":0,"analysisTimeframe":{"start":"2025-01-02T11:06:45.660Z","end":"2025-01-02T13:06:45.660Z"},"locale":"en-US","executionTimeMilliseconds":48,"notifications":[],"queryId":"e453c003-e664-4202-8ffd-04d197048552","sampled":false}},"types":[{"mappings":{"entity.name":{"type":"string"},"id":{"type":"string"},"event.status":{"type":"undefined"},"display_id":{"type":"undefined"},"event.start":{"type":"undefined"},"event.id":{"type":"undefined"},"status":{"type":"string"}},"indexRange":[0,4]}]},"notifications":[],"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"dateTime":"2025-01-02T13:06:46.023Z","input":{"timeframe":{"from":"now()-2h","to":"now()"},"value":"fetch dt.entity.host\n| fields entity.name, id\n| lookup [\n  fetch dt.davis.problems\n  | filter event.status==\"ACTIVE\" and dt.davis.is_duplicate==false\n  | expand affected_entity_ids\n], sourceField:id, lookupField:affected_entity_ids, fields:{event.status, display_id, event.start, event.id}\n| fieldsAdd status=if(event.status==\"ACTIVE\", \"Problem\", else: \"OK\")\n| sort event.status asc, entity.name"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"gap","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"layout":"vertical","categoryAxisTickLayout":"horizontal","scale":"absolute","groupMode":"stacked","colorPaletteMode":"multi-color","categoryAxis":["entity.name","id","status"],"categoryAxisLabel":"entity.name,id,status","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"colorPalette":"categorical","valueRepresentation":"absolute","truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"entity.name","prefixIcon":"","recordField":"entity.name","autoscale":true,"alignment":"center","trend":{"trendType":"auto","isVisible":true},"colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"firstVisibleRowIndex":0,"columnWidths":{},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"displayedFields":["entity.name","id","event.status","display_id","event.id","status"],"dataMappings":{"value":"status"},"truncationMode":"middle","colorMode":"custom-colors","colorPalette":"categorical","customColors":[{"id":0,"value":"OK","comparator":"=","color":{"Default":"var(--dt-colors-charts-vulnerability-status-resolved-default, #3e8e6a)"}},{"id":10703363.200000003,"value":"Problem","comparator":"=","color":{"Default":"var(--dt-colors-charts-categorical-color-12-default, #cd3741)"}}]},"histogram":{"legend":"auto","yAxis":{"label":"Frequency","scale":"linear"},"colorPalette":"categorical","dataMappings":[],"variant":"single","truncationMode":"middle","displayedFields":["entity.name","id","status"]}},"state":"success"}},{"id":"0e0bc197-e1a3-46ef-bf2e-3cf49e31ea21","type":"markdown","markdown":"### 4.1.2 Multiple timeseries\n\nCurrently you organisation is experiencing some networking issues and believe it could be related to the F5 instances. You have been tasked to chart the total network utilization (in and out) of your F5 instances and to show if they are above 30TB usage in the last 2 hours\n\n**Task**:\n\n- Find a way to implement the above requirements\n- You can utilse the following metrics `com.dynatrace.extension.f5.bigip.sys.interface.stat.bytes.in.count` and `com.dynatrace.extension.f5.bigip.sys.interface.stat.bytes.out.count`\n- Remember to add correct overides for the data (Bytes) and thresholds would be useful to see breaches"},{"id":"cf07565c-5a2b-4121-b122-143f490260e4","type":"dql","showTitle":false,"filterSegments":[],"drilldownPath":[],"showInput":true,"height":174,"previousFilterSegments":[],"state":{"input":{"value":"timeseries BytesRecieved = sum(com.dynatrace.extension.f5.bigip.sys.interface.stat.bytes.in.count) , by: { instance.name }\n| join [timeseries BytesTransmitted = sum(com.dynatrace.extension.f5.bigip.sys.interface.stat.bytes.out.count) , by: { instance.name }] , kind:leftOuter , on:{timeframe , instance.name }\n| fieldsAdd TotalNetworkThroughput = arraySum(BytesRecieved) + arraySUM(right.BytesTransmitted)\n| fieldsKeep instance.name , TotalNetworkThroughput","timeframe":{"from":"now()-2h","to":"now()"}},"visualization":"table","querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"result":{"code":200,"value":{"records":[{"instance.name":"bigip#0","TotalNetworkThroughput":32753959753033},{"instance.name":"bigip#1","TotalNetworkThroughput":32840161821663},{"instance.name":"bigip#2","TotalNetworkThroughput":24705432621894},{"instance.name":"bigip#3","TotalNetworkThroughput":23737104606098},{"instance.name":"bigip#4","TotalNetworkThroughput":29140432176384},{"instance.name":"bigip#5","TotalNetworkThroughput":28177638234648},{"instance.name":"bigip#6","TotalNetworkThroughput":30083798108983},{"instance.name":"bigip#7","TotalNetworkThroughput":15685852082870},{"instance.name":"bigip#8","TotalNetworkThroughput":20188616731382},{"instance.name":"bigip#9","TotalNetworkThroughput":31911914520927}],"metadata":{"grail":{"canonicalQuery":"timeseries by:{instance.name}, BytesRecieved = sum(com.dynatrace.extension.f5.bigip.sys.interface.stat.bytes.in.count)\n| join [timeseries by:{instance.name}, BytesTransmitted = sum(com.dynatrace.extension.f5.bigip.sys.interface.stat.bytes.out.count)], kind:leftOuter, on:{timeframe, instance.name}\n| fieldsAdd TotalNetworkThroughput = arraySum(BytesRecieved) + arraySum(right.BytesTransmitted)\n| fieldsKeep instance.name, TotalNetworkThroughput","timezone":"Europe/London","query":"timeseries BytesRecieved = sum(com.dynatrace.extension.f5.bigip.sys.interface.stat.bytes.in.count) , by: { instance.name }\n| join [timeseries BytesTransmitted = sum(com.dynatrace.extension.f5.bigip.sys.interface.stat.bytes.out.count) , by: { instance.name }] , kind:leftOuter , on:{timeframe , instance.name }\n| fieldsAdd TotalNetworkThroughput = arraySum(BytesRecieved) + arraySUM(right.BytesTransmitted)\n| fieldsKeep instance.name , TotalNetworkThroughput","scannedRecords":0,"dqlVersion":"V1_0","scannedBytes":0,"scannedDataPoints":9680,"analysisTimeframe":{"start":"2025-01-02T11:06:00.000Z","end":"2025-01-02T13:07:00.000Z"},"locale":"en-US","executionTimeMilliseconds":106,"notifications":[],"queryId":"39c32279-d696-4aaf-8b44-94d9d30b9dc5","sampled":false},"metrics":[{"metric.key":"com.dynatrace.extension.f5.bigip.sys.interface.stat.bytes.in.count","displayName":"Bytes received","description":"The number of bytes received on the specified interface.","unit":"By","fieldName":"BytesRecieved"},{"metric.key":"com.dynatrace.extension.f5.bigip.sys.interface.stat.bytes.out.count","displayName":"Bytes transmitted","description":"The number of bytes transmitted out of the specified interface.","unit":"By","fieldName":"BytesTransmitted"}]},"types":[{"mappings":{"instance.name":{"type":"string"},"TotalNetworkThroughput":{"type":"double"}},"indexRange":[0,9]}]},"notifications":[],"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"dateTime":"2025-01-02T13:06:50.809Z","input":{"timeframe":{"from":"now()-2h","to":"now()"},"value":"timeseries BytesRecieved = sum(com.dynatrace.extension.f5.bigip.sys.interface.stat.bytes.in.count) , by: { instance.name }\n| join [timeseries BytesTransmitted = sum(com.dynatrace.extension.f5.bigip.sys.interface.stat.bytes.out.count) , by: { instance.name }] , kind:leftOuter , on:{timeframe , instance.name }\n| fieldsAdd TotalNetworkThroughput = arraySum(BytesRecieved) + arraySUM(right.BytesTransmitted)\n| fieldsKeep instance.name , TotalNetworkThroughput"}},"visualizationSettings":{"thresholds":[{"id":1,"field":"TotalNetworkThroughput","title":"","isEnabled":true,"rules":[{"id":0,"color":{"Default":"var(--dt-colors-charts-status-ideal-default, #2f6863)"},"comparator":"≥","label":"","value":0},{"id":2,"color":{"Default":"var(--dt-colors-charts-status-critical-default, #c4233b)"},"comparator":"≥","label":"","value":30000000000000}]}],"chartSettings":{"gapPolicy":"gap","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"layout":"vertical","categoryAxisTickLayout":"horizontal","scale":"absolute","groupMode":"stacked","colorPaletteMode":"multi-color","categoryAxis":"instance.name","categoryAxisLabel":"instance.name","valueAxis":["TotalNetworkThroughput"],"valueAxisLabel":"TotalNetworkThroughput","tooltipVariant":"single"},"colorPalette":"categorical","valueRepresentation":"absolute","truncationMode":"middle","xAxisScaling":"analyzedTimeframe"},"singleValue":{"showLabel":true,"label":"instance.name","prefixIcon":"","recordField":"instance.name","autoscale":true,"alignment":"center","trend":{"trendType":"auto","isVisible":true},"colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"firstVisibleRowIndex":0,"columnWidths":{},"columnTypeOverrides":[],"colorThresholdTarget":"background","enableThresholdInRow":false,"selectedColumnForRowThreshold":"TotalNetworkThroughput"},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"displayedFields":["instance.name"],"dataMappings":{"value":"TotalNetworkThroughput"},"truncationMode":"middle","colorMode":"color-palette","colorPalette":"blue"},"histogram":{"legend":"auto","yAxis":{"label":"Frequency","scale":"linear"},"colorPalette":"categorical","dataMappings":[{"valueAxis":"TotalNetworkThroughput","rangeAxis":""}],"variant":"single","truncationMode":"middle","displayedFields":["instance.name"]},"unitsOverrides":[{"identifier":"TotalNetworkThroughput","unitCategory":"data","baseUnit":"byte","displayUnit":"terabyte","decimals":2,"suffix":"","delimiter":false,"added":1729258563218}]},"state":"success"}},{"id":"dde48cef-50eb-4029-8961-4c1ecf628fc5","type":"markdown","markdown":"## 4.2 Demo / Extras"},{"id":"5645fcb9-01b3-4098-a4c8-c8acd146aef7","type":"markdown","markdown":"### 4.2.1 DQL in a code tile\n\nIn some cases you may want to enhance your DQL queries with external or non-grail data. In the example below we use Javascript to corralate if the bigger spenders for an applications have a better user experience score. This uses a combination of usql and DQL as RUM data is not yet available in Grail."},{"id":"516ea310-9650-46e3-a9cf-5006b35719f8","type":"function","showTitle":false,"drilldownPath":[],"showInput":true,"height":148,"state":{"input":{"value":"import { rumUserSessionsClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\nimport { queryExecutionClient } from \"@dynatrace-sdk/client-query\";\n\nexport default async function () {\n  const queryData = await queryExecutionClient.queryExecute({\n    body: {\n      query: 'fetch bizevents , from:-2h , to:now() | filter isNotNull(dt.rum.application.id) AND isNotNull(cardType) | fields name , amount , cardType , dt.rum.session.id | sort amount desc | limit 5',\n    },\n  });\n\n  setTimeout(() => {}, 2500);\n\n  const completedData = await queryExecutionClient.queryPoll({\n    requestToken: queryData.requestToken,\n  });\n\n  const combinedData = await Promise.all(completedData.result.records.map(async (record) => {\n    const usqlQuery = `SELECT userSessionId , userExperienceScore FROM usersession WHERE userSessionId = \"${record[\"dt.rum.session.id\"]}\"`;\n    const usqlResponse = await rumUserSessionsClient.getUsqlResultAsTable({ query: usqlQuery });\n\n    const userExperienceScore = usqlResponse.values.length > 0 ? usqlResponse.values : 'UNKNOWN';\n\n    return {\n      name: record.name,\n      amount: record.amount.toFixed(2),\n      cardType: record.cardType,\n      sessionId: record[\"dt.rum.session.id\"],\n      userExperienceScore: userExperienceScore\n    };\n  }));\n\n  const sampleCount = combinedData.length;\n\n  return {\n    records: combinedData.map((record, index) => ({\n      'Name': record.name,\n      'Amount': record.amount,\n      'CardType': record.cardType,\n      'UserExperienceScore': record.userExperienceScore[0][1]\n    })),\n    types: [\n      {\n        indexRange: [0, sampleCount],\n        mappings: {\n          'Name': { type: 'string' },\n          'Amount': { type: 'Double' },\n          'CardType': { type: 'string' },\n          'UserExperienceScore': { type: 'string' }\n        }\n      }\n    ]\n  };\n}","timeframe":{"from":"now()-2h","to":"now()"}},"state":"success","visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"gap","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"layout":"vertical","categoryAxisTickLayout":"horizontal","scale":"absolute","groupMode":"stacked","colorPaletteMode":"multi-color","categoryAxis":["Name","CardType","UserExperienceScore"],"categoryAxisLabel":"Name,CardType,UserExperienceScore","valueAxis":[],"valueAxisLabel":"","tooltipVariant":"single"},"colorPalette":"categorical","valueRepresentation":"absolute","truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"Name","prefixIcon":"","recordField":"Name","autoscale":true,"alignment":"center","trend":{"trendType":"auto","isVisible":true},"colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"firstVisibleRowIndex":0,"columnWidths":{},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"displayedFields":["Name","CardType","UserExperienceScore"],"dataMappings":{"value":"Name"},"truncationMode":"middle","colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"legend":"auto","yAxis":{"label":"Frequency","scale":"linear"},"colorPalette":"categorical","dataMappings":[],"variant":"single","truncationMode":"middle","displayedFields":["Name","CardType","UserExperienceScore"]}},"result":{"code":200,"value":{"records":[{"Name":"James Norton","Amount":"1950.80","CardType":"mastercard","UserExperienceScore":"SATISFIED"},{"Name":"Hailey Jimenez","Amount":"1498.04","CardType":"mastercard","UserExperienceScore":"SATISFIED"},{"Name":"Carolyn Burton","Amount":"1492.26","CardType":"visaCredit","UserExperienceScore":"SATISFIED"},{"Name":"Cynthia Brown","Amount":"1492.16","CardType":"visaCredit","UserExperienceScore":"SATISFIED"},{"Name":"Stephanie Henson","Amount":"1489.87","CardType":"americanExpress","UserExperienceScore":"SATISFIED"}],"metadata":{},"types":[{"mappings":{"Name":{"type":"string"},"Amount":{"type":"Double"},"CardType":{"type":"string"},"UserExperienceScore":{"type":"string"}},"indexRange":[0,5]}]},"logs":"","dateTime":"2025-01-02T13:06:57.080Z","input":{"timeframe":{"from":"now()-2h","to":"now()"},"value":"import { rumUserSessionsClient } from \"@dynatrace-sdk/client-classic-environment-v1\";\nimport { queryExecutionClient } from \"@dynatrace-sdk/client-query\";\n\nexport default async function () {\n  const queryData = await queryExecutionClient.queryExecute({\n    body: {\n      query: 'fetch bizevents , from:-2h , to:now() | filter isNotNull(dt.rum.application.id) AND isNotNull(cardType) | fields name , amount , cardType , dt.rum.session.id | sort amount desc | limit 5',\n    },\n  });\n\n  setTimeout(() => {}, 2500);\n\n  const completedData = await queryExecutionClient.queryPoll({\n    requestToken: queryData.requestToken,\n  });\n\n  const combinedData = await Promise.all(completedData.result.records.map(async (record) => {\n    const usqlQuery = `SELECT userSessionId , userExperienceScore FROM usersession WHERE userSessionId = \"${record[\"dt.rum.session.id\"]}\"`;\n    const usqlResponse = await rumUserSessionsClient.getUsqlResultAsTable({ query: usqlQuery });\n\n    const userExperienceScore = usqlResponse.values.length > 0 ? usqlResponse.values : 'UNKNOWN';\n\n    return {\n      name: record.name,\n      amount: record.amount.toFixed(2),\n      cardType: record.cardType,\n      sessionId: record[\"dt.rum.session.id\"],\n      userExperienceScore: userExperienceScore\n    };\n  }));\n\n  const sampleCount = combinedData.length;\n\n  return {\n    records: combinedData.map((record, index) => ({\n      'Name': record.name,\n      'Amount': record.amount,\n      'CardType': record.cardType,\n      'UserExperienceScore': record.userExperienceScore[0][1]\n    })),\n    types: [\n      {\n        indexRange: [0, sampleCount],\n        mappings: {\n          'Name': { type: 'string' },\n          'Amount': { type: 'Double' },\n          'CardType': { type: 'string' },\n          'UserExperienceScore': { type: 'string' }\n        }\n      }\n    ]\n  };\n}"}},"visualization":"table"}},{"id":"a5800736-ed52-470f-a6e3-1ce30d2e916c","type":"markdown","markdown":"### 4.2.2 Alternatives to lookups\nYour colleague has been looking and studying up on DQL he is sure that the below DQL can be done without using lookups. Using the below DQL as a reference , implement an indetical query without using lookups.\n\nTask:\n\nFind a way to implement the above requirements\nYou cannot use the lookup functionality\nMaybe interacting with the entities directly might help\nAs this is a demo env the data here is a little odd , a bar or area chart will show much better results"},{"id":"49e53eff-8c6b-4d65-bf52-f68dd219ba94","type":"dql","title":"","showTitle":false,"showInput":true,"filterSegments":[],"drilldownPath":[],"height":144,"state":{"input":{"value":"timeseries avg(dt.service.request.count) , by:{dt.entity.service}\n| lookup [ fetch dt.entity.service ] , sourceField:dt.entity.service , lookupField:id , fields:{databaseVendor , entity.detected_name}\n| filter isNotNull(databaseVendor)\n| fieldsAdd ProcessedName = concat(entity.detected_name , \" - \" , databaseVendor)\n| fieldsKeep timeframe , interval , `avg(dt.service.request.count)` , ProcessedName\n\n// Answer\n//timeseries avg(dt.service.request.count) , by:{dt.entity.service}\n//| filter in(dt.entity.service , classicEntitySelector(\"type(SERVICE) AND serviceType(DATABASE_SERVICE)\"))\n//| fieldsAdd dt.entity.service.name = concat(entityName(dt.entity.service) , \" - \" , entityAttr(dt.entity.service , \"databaseVendor\"))\n","timeframe":{"from":"now()-2h","to":"now()"}},"visualization":"lineChart","visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"gap","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"layout":"vertical","categoryAxisTickLayout":"horizontal","scale":"absolute","groupMode":"stacked","colorPaletteMode":"multi-color","categoryAxis":"ProcessedName","categoryAxisLabel":"ProcessedName","valueAxis":["interval"],"valueAxisLabel":"interval","tooltipVariant":"single"},"colorPalette":"categorical","xAxisScaling":"analyzedTimeframe","truncationMode":"middle","hiddenLegendFields":[],"fieldMapping":{"timestamp":"timeframe","leftAxisValues":["avg(dt.service.request.count)"],"leftAxisDimensions":["ProcessedName"]}},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","recordField":"ProcessedName","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"firstVisibleRowIndex":0,"columnWidths":{},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"blue","dataMappings":{"value":"interval"},"displayedFields":["ProcessedName"]},"histogram":{"legend":"auto","yAxis":{"label":"Frequency","scale":"linear"},"colorPalette":"categorical","dataMappings":[{"valueAxis":"interval","rangeAxis":""}]}},"state":"success","result":{"code":200,"value":{"records":[{"timeframe":{"start":"2024-10-20T09:59:00.000Z","end":"2024-10-20T12:00:00.000Z"},"interval":"60000000000","avg(dt.service.request.count)":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,null],"ProcessedName":"TradeManagement - SQL Server"},{"timeframe":{"start":"2024-10-20T09:59:00.000Z","end":"2024-10-20T12:00:00.000Z"},"interval":"60000000000","avg(dt.service.request.count)":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,null],"ProcessedName":"easyTravelBusiness - Derby Client"},{"timeframe":{"start":"2024-10-20T09:59:00.000Z","end":"2024-10-20T12:00:00.000Z"},"interval":"60000000000","avg(dt.service.request.count)":[1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,null],"ProcessedName":"[embedded] - H2"},{"timeframe":{"start":"2024-10-20T09:59:00.000Z","end":"2024-10-20T12:00:00.000Z"},"interval":"60000000000","avg(dt.service.request.count)":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,null],"ProcessedName":"TradeManagement - SqlConnection"},{"timeframe":{"start":"2024-10-20T09:59:00.000Z","end":"2024-10-20T12:00:00.000Z"},"interval":"60000000000","avg(dt.service.request.count)":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,null],"ProcessedName":"memberships - MySQL"},{"timeframe":{"start":"2024-10-20T09:59:00.000Z","end":"2024-10-20T12:00:00.000Z"},"interval":"60000000000","avg(dt.service.request.count)":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,null],"ProcessedName":"my_database - MySQL"},{"timeframe":{"start":"2024-10-20T09:59:00.000Z","end":"2024-10-20T12:00:00.000Z"},"interval":"60000000000","avg(dt.service.request.count)":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,null],"ProcessedName":"likeDb - MySQL"},{"timeframe":{"start":"2024-10-20T09:59:00.000Z","end":"2024-10-20T12:00:00.000Z"},"interval":"60000000000","avg(dt.service.request.count)":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,null],"ProcessedName":"user-info-table-discover in us-east-1 - AWS"}],"metadata":{"grail":{"canonicalQuery":"timeseries by:{dt.entity.service}, avg(dt.service.request.count)\n| lookup [fetch dt.entity.service], sourceField:dt.entity.service, lookupField:id, fields:{databaseVendor, entity.detected_name}\n| filter isNotNull(databaseVendor)\n| fieldsAdd ProcessedName = concat(entity.detected_name, \" - \", databaseVendor)\n| fieldsKeep timeframe, interval, `avg(dt.service.request.count)`, ProcessedName","timezone":"Europe/London","query":"timeseries avg(dt.service.request.count) , by:{dt.entity.service}\n| lookup [ fetch dt.entity.service ] , sourceField:dt.entity.service , lookupField:id , fields:{databaseVendor , entity.detected_name}\n| filter isNotNull(databaseVendor)\n| fieldsAdd ProcessedName = concat(entity.detected_name , \" - \" , databaseVendor)\n| fieldsKeep timeframe , interval , `avg(dt.service.request.count)` , ProcessedName\n\n// Answer\n//timeseries avg(dt.service.request.count) , by:{dt.entity.service}\n//| filter in(dt.entity.service , classicEntitySelector(\"type(SERVICE) AND serviceType(DATABASE_SERVICE)\"))\n//| fieldsAdd dt.entity.service.name = concat(entityName(dt.entity.service) , \" - \" , entityAttr(dt.entity.service , \"databaseVendor\"))\n","scannedRecords":96,"dqlVersion":"V1_0","scannedBytes":0,"scannedDataPoints":24805,"analysisTimeframe":{"start":"2024-10-20T09:59:00.000Z","end":"2024-10-20T12:00:00.000Z"},"locale":"en-US","executionTimeMilliseconds":91,"notifications":[],"queryId":"561cd70e-ec69-4f38-b399-3f3de5203110","sampled":false},"metrics":[{"metric.key":"dt.service.request.count","displayName":"Service request count","description":"Number of requests received by a given service. To learn how Dynatrace detects and analyzes services, see [Services](https://dt-url.net/am-services).","unit":"count","fieldName":"avg(dt.service.request.count)"}]},"types":[{"mappings":{"timeframe":{"type":"timeframe"},"interval":{"type":"duration"},"avg(dt.service.request.count)":{"type":"array","types":[{"mappings":{"element":{"type":"double"}},"indexRange":[0,120]}]},"ProcessedName":{"type":"string"}},"indexRange":[0,7]}]},"notifications":[],"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"dateTime":"2024-10-20T11:59:17.612Z","input":{"timeframe":{"from":"now()-2h","to":"now()"},"value":"timeseries avg(dt.service.request.count) , by:{dt.entity.service}\n| lookup [ fetch dt.entity.service ] , sourceField:dt.entity.service , lookupField:id , fields:{databaseVendor , entity.detected_name}\n| filter isNotNull(databaseVendor)\n| fieldsAdd ProcessedName = concat(entity.detected_name , \" - \" , databaseVendor)\n| fieldsKeep timeframe , interval , `avg(dt.service.request.count)` , ProcessedName\n\n// Answer\n//timeseries avg(dt.service.request.count) , by:{dt.entity.service}\n//| filter in(dt.entity.service , classicEntitySelector(\"type(SERVICE) AND serviceType(DATABASE_SERVICE)\"))\n//| fieldsAdd dt.entity.service.name = concat(entityName(dt.entity.service) , \" - \" , entityAttr(dt.entity.service , \"databaseVendor\"))\n"}}}},{"id":"f4f3c024-57fa-4c94-8d28-66292aa9a093","type":"markdown","markdown":"### 4.2.3 Extending relationships\n\n**Task**:\n\n- Enhance the below code to additionally add the namespace to the name of the fields\n- The database services will not have a reference to the namespace they inhabit maybe the process might be able to help you\n- You can assume that the first Process Group Instance will be the one you want the namsepace to be collected from"},{"id":"116f18e7-be98-49c5-9198-1390bbbb479b","type":"dql","showTitle":false,"filterSegments":[],"drilldownPath":[],"showInput":true,"height":156,"previousFilterSegments":[],"state":{"input":{"value":"timeseries avg(dt.service.request.count) , by:{dt.entity.service}\n| lookup [\n  fetch dt.entity.service\n  | lookup [fetch dt.entity.process_group_instance] , sourceField:runs_on[dt.entity.process_group_instance][0] , lookupField:id , fields:{metadata}\n] , sourceField:dt.entity.service , lookupField:id , fields:{databaseVendor , entity.detected_name , metadata}\n| filter isNotNull(databaseVendor)\n| fieldsAdd metadataString = toString(metadata)\n| parse metadataString, \"\"\"DATA \"KUBERNETES_NAMESPACE:\" ALNUM:namespace DATA\"\"\"\n| fieldsAdd ProcessedName = concat(entity.detected_name , \" - \" , databaseVendor , \" - \" , namespace)\n| fieldsKeep timeframe , interval , `avg(dt.service.request.count)` , ProcessedName","timeframe":{"from":"now()-2h","to":"now()"}},"visualization":"lineChart","querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"result":{"code":200,"value":{"records":[{"timeframe":{"start":"2025-01-02T11:07:00.000Z","end":"2025-01-02T13:08:00.000Z"},"interval":"60000000000","avg(dt.service.request.count)":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"ProcessedName":"TradeManagement - SQL Server - easytrade"},{"timeframe":{"start":"2025-01-02T11:07:00.000Z","end":"2025-01-02T13:08:00.000Z"},"interval":"60000000000","avg(dt.service.request.count)":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"ProcessedName":"easyTravelBusiness - Derby Client - "},{"timeframe":{"start":"2025-01-02T11:07:00.000Z","end":"2025-01-02T13:08:00.000Z"},"interval":"60000000000","avg(dt.service.request.count)":[null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,null,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,1,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null,1,1,null],"ProcessedName":"[embedded] - H2 - unguard"},{"timeframe":{"start":"2025-01-02T11:07:00.000Z","end":"2025-01-02T13:08:00.000Z"},"interval":"60000000000","avg(dt.service.request.count)":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"ProcessedName":"TradeManagement - SqlConnection - "},{"timeframe":{"start":"2025-01-02T11:07:00.000Z","end":"2025-01-02T13:08:00.000Z"},"interval":"60000000000","avg(dt.service.request.count)":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"ProcessedName":"memberships - MySQL - unguard"},{"timeframe":{"start":"2025-01-02T11:07:00.000Z","end":"2025-01-02T13:08:00.000Z"},"interval":"60000000000","avg(dt.service.request.count)":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"ProcessedName":"my_database - MySQL - unguard"},{"timeframe":{"start":"2025-01-02T11:07:00.000Z","end":"2025-01-02T13:08:00.000Z"},"interval":"60000000000","avg(dt.service.request.count)":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],"ProcessedName":"likeDb - MySQL - unguard"}],"metadata":{"grail":{"canonicalQuery":"timeseries by:{dt.entity.service}, avg(dt.service.request.count)\n| lookup \n\t[\n\t\tfetch dt.entity.service\n\t\t| lookup [fetch dt.entity.process_group_instance], sourceField:runs_on[dt.entity.process_group_instance][0], lookupField:id, fields:{metadata}\n\t], sourceField:dt.entity.service, lookupField:id, fields:{databaseVendor, entity.detected_name, metadata}\n| filter isNotNull(databaseVendor)\n| fieldsAdd metadataString = toString(metadata)\n| parse metadataString, \"\"\"DATA \"KUBERNETES_NAMESPACE:\" ALNUM:namespace DATA\"\"\"\n| fieldsAdd ProcessedName = concat(entity.detected_name, \" - \", databaseVendor, \" - \", namespace)\n| fieldsKeep timeframe, interval, `avg(dt.service.request.count)`, ProcessedName","timezone":"Europe/London","query":"timeseries avg(dt.service.request.count) , by:{dt.entity.service}\n| lookup [\n  fetch dt.entity.service\n  | lookup [fetch dt.entity.process_group_instance] , sourceField:runs_on[dt.entity.process_group_instance][0] , lookupField:id , fields:{metadata}\n] , sourceField:dt.entity.service , lookupField:id , fields:{databaseVendor , entity.detected_name , metadata}\n| filter isNotNull(databaseVendor)\n| fieldsAdd metadataString = toString(metadata)\n| parse metadataString, \"\"\"DATA \"KUBERNETES_NAMESPACE:\" ALNUM:namespace DATA\"\"\"\n| fieldsAdd ProcessedName = concat(entity.detected_name , \" - \" , databaseVendor , \" - \" , namespace)\n| fieldsKeep timeframe , interval , `avg(dt.service.request.count)` , ProcessedName","scannedRecords":464,"dqlVersion":"V1_0","scannedBytes":0,"scannedDataPoints":18150,"analysisTimeframe":{"start":"2025-01-02T11:07:00.000Z","end":"2025-01-02T13:08:00.000Z"},"locale":"en-US","executionTimeMilliseconds":438,"notifications":[],"queryId":"70c7b768-0dac-48dd-a0e1-c385837bf561","sampled":false},"metrics":[{"metric.key":"dt.service.request.count","displayName":"Service request count","description":"Number of requests received by a given service. To learn how Dynatrace detects and analyzes services, see [Services](https://dt-url.net/am-services).","unit":"count","fieldName":"avg(dt.service.request.count)"}]},"types":[{"mappings":{"timeframe":{"type":"timeframe"},"interval":{"type":"duration"},"avg(dt.service.request.count)":{"type":"array","types":[{"mappings":{"element":{"type":"double"}},"indexRange":[0,120]}]},"ProcessedName":{"type":"string"}},"indexRange":[0,6]}]},"notifications":[],"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"dateTime":"2025-01-02T13:07:29.906Z","input":{"timeframe":{"from":"now()-2h","to":"now()"},"value":"timeseries avg(dt.service.request.count) , by:{dt.entity.service}\n| lookup [\n  fetch dt.entity.service\n  | lookup [fetch dt.entity.process_group_instance] , sourceField:runs_on[dt.entity.process_group_instance][0] , lookupField:id , fields:{metadata}\n] , sourceField:dt.entity.service , lookupField:id , fields:{databaseVendor , entity.detected_name , metadata}\n| filter isNotNull(databaseVendor)\n| fieldsAdd metadataString = toString(metadata)\n| parse metadataString, \"\"\"DATA \"KUBERNETES_NAMESPACE:\" ALNUM:namespace DATA\"\"\"\n| fieldsAdd ProcessedName = concat(entity.detected_name , \" - \" , databaseVendor , \" - \" , namespace)\n| fieldsKeep timeframe , interval , `avg(dt.service.request.count)` , ProcessedName"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"gap","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"layout":"vertical","categoryAxisTickLayout":"horizontal","scale":"absolute","groupMode":"stacked","colorPaletteMode":"multi-color","categoryAxis":"ProcessedName","categoryAxisLabel":"ProcessedName","valueAxis":["interval"],"valueAxisLabel":"interval","tooltipVariant":"single"},"colorPalette":"categorical","valueRepresentation":"absolute","truncationMode":"middle","xAxisScaling":"analyzedTimeframe","hiddenLegendFields":[],"fieldMapping":{"timestamp":"timeframe","leftAxisValues":["avg(dt.service.request.count)"],"leftAxisDimensions":["ProcessedName"]},"xAxisLabel":"timeframe","xAxisIsLabelVisible":false,"leftYAxisSettings":{"isLabelVisible":true,"label":"Service request count"}},"singleValue":{"showLabel":true,"label":"ProcessedName","prefixIcon":"","recordField":"ProcessedName","autoscale":true,"alignment":"center","trend":{"trendType":"auto","isVisible":true},"colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"firstVisibleRowIndex":0,"columnWidths":{},"columnTypeOverrides":[{"fields":["avg(dt.service.request.count)"],"value":"sparkline","id":1735823249906}]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"displayedFields":["ProcessedName"],"dataMappings":{"value":"interval"},"truncationMode":"middle","colorMode":"color-palette","colorPalette":"blue"},"histogram":{"legend":"auto","yAxis":{"label":"Frequency","scale":"linear"},"colorPalette":"categorical","dataMappings":[{"valueAxis":"interval","rangeAxis":""}],"variant":"single","truncationMode":"middle","displayedFields":["ProcessedName"]}},"state":"success"}}],"defaultSegments":[]}