{"version":"6","defaultTimeframe":{"from":"now()-7d","to":"now()"},"sections":[{"id":"11b53dfd-8a03-4b06-9246-004ebd94795e","type":"markdown","markdown":"# Adv. DQL - Lab 3\n\n## Parsing and Relationships\n---"},{"id":"7b92838f-e70b-41e5-8457-5e7fd0f50717","type":"markdown","markdown":"### 3.1 Simple Parse: \n\nOne of your colleagues has come to you with the following DQL , all they want to do is chart the amount of records by different instruments , they also want to exlude any data for IDs greater than 3 as they are not buisness critical, but their below DQL does not seem to work.\n\n**Task**:\n\n- Fix the below code so that you can chart the count of the different instruments over time"},{"id":"d91b98fb-9aa2-407c-8c56-09db61ff0fd2","type":"dql","filterSegments":[],"drilldownPath":[],"previousFilterSegments":[],"state":{"input":{"value":"fetch logs\n| fields content\n| filter contains(content,  \"msg=\\\"Getting pricing data for instrument\\\"\")","timeframe":{"from":"now()-7d","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"visualizationSettings":{"autoSelectVisualization":true},"state":"idle"}},{"id":"3a8c0e75-237d-4d0f-84a1-a2e8e1670231","type":"markdown","markdown":"### 3.2 Parsing and data types: \n\nNow that we are familiar with the dataset parse the log content to extract as many fields as you possible can from the records.\n\n**Task**:\n\n- Parse the below content to extract as much of the available information as you can\n- *Challenge*: for each of the extracted propertied ensure that you use a **different** parsing data type "},{"id":"889a2c08-a28e-4f86-a319-2529c72553d0","type":"dql","showTitle":false,"filterSegments":[],"drilldownPath":[],"state":{"input":{"value":"fetch logs\n| fields content\n| filter contains(content,  \"msg=\\\"Getting pricing data for instrument\\\"\")","timeframe":{"from":"now()-7d","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"visualizationSettings":{"thresholds":[],"chartSettings":{"gapPolicy":"gap","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"layout":"vertical","categoryAxisTickLayout":"horizontal","scale":"absolute","groupMode":"stacked","colorPaletteMode":"multi-color"},"colorPalette":"categorical"},"singleValue":{"showLabel":true,"label":"","prefixIcon":"","autoscale":true,"alignment":"center","colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"firstVisibleRowIndex":0,"columnWidths":{},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"colorMode":"color-palette","colorPalette":"categorical"},"histogram":{"legend":"auto","yAxis":{"label":"Frequency","scale":"linear"},"colorPalette":"categorical","dataMappings":[]}},"state":"idle"}},{"id":"f7b3b7dd-77f7-402a-896e-4b59090fcb70","type":"markdown","markdown":"### 3.3 - Parsing JSON\n\n**Task**:\n- Parse the logs to extract all JSON elements as records\n- Add a field that shows the number of packages per log"},{"id":"268d7de8-a505-4dca-aeb7-412ec74d03cc","type":"dql","filterSegments":[],"drilldownPath":[],"previousFilterSegments":[],"state":{"input":{"value":"fetch bizevents\n| filter isNotNull(Response)","timeframe":{"from":"now()-7d","to":"now()"}},"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"visualizationSettings":{"autoSelectVisualization":true},"state":"idle"}},{"id":"b4af82e7-e4ce-4793-ad41-e996c5418c54","type":"markdown","markdown":"### 3.4 - Alternative matchers\n\n**Task**:\n- Add an additional parsing rule to match the missing user_agent strings\n- The non matching logs look like this:\n\n```\n    End time       : 2024-10-20 12:38:49.385738126 +0000 UTC\n    Status code    : STATUS_CODE_UNSET\n    Status message : \nAttributes:\n     -> http.method: STRING(GET)\n     -> http.server_name: STRING(0.0.0.0)\n     -> http.scheme: STRING(http)\n     -> net.host.name: STRING(172.31.38.210:8111)\n     -> http.host: STRING(172.31.38.210:8111)\n     -> net.host.port: INT(8111)\n     -> http.target: STRING(/_healthz)\n     -> net.peer.ip: STRING(172.31.36.51)\n     -> net.peer.port: INT(46472)\n     -> http.user_agent: STRING(kube-probe/1.30+)\n     -> http.flavor: STRING(1.1)\n     -> http.route: STRING(/_healthz)\n     -> http.status_code: INT(200)\nSpan #1\n    Trace ID       : c99a0990fc5edc8d64fb30a6c6ef24da\n    Parent ID      : \n    ID             : ae3b54adcb728a3d\n    Name           : GET /_healthz\n    Kind           : SPAN_KIND_SERVER```"},{"id":"17b944db-6ca4-411d-98e3-39d81da2d48f","type":"dql","showTitle":false,"filterSegments":[],"drilldownPath":[],"height":259,"state":{"input":{"value":"fetch logs\n| filter matchesPhrase(content, \"user_agent\")\n| fieldsAdd user_agent =  parse(content, \"\"\"LD '\"user_agent\":\"' DATA:user_agent '\"' \"\"\")\n| summarize count(), by:user_agent","timeframe":{"from":"now()-7d","to":"now()"}},"visualization":"table","querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"result":{"code":200,"value":{"records":[{"user_agent":"axios/0.20.0","count()":"289947"},{"user_agent":"python-requests/2.27.1","count()":"71"},{"user_agent":"simulated-browser-user","count()":"69452"},{"user_agent":null,"count()":"190915"}],"metadata":{"grail":{"canonicalQuery":"fetch logs\n| filter matchesPhrase(content, \"user_agent\")\n| fieldsAdd user_agent = parse(content, \"\"\"LD '\"user_agent\":\"' DATA:user_agent '\"' \"\"\")\n| summarize by:{user_agent}, count()","timezone":"Europe/London","query":"fetch logs\n| filter matchesPhrase(content, \"user_agent\")\n| fieldsAdd user_agent =  parse(content, \"\"\"LD '\"user_agent\":\"' DATA:user_agent '\"' \"\"\")\n| summarize count(), by:user_agent","scannedRecords":742745845,"dqlVersion":"V1_0","scannedBytes":33547876768,"scannedDataPoints":0,"analysisTimeframe":{"start":"2024-12-26T14:14:37.274Z","end":"2025-01-02T14:14:37.274Z"},"locale":"en-US","executionTimeMilliseconds":237,"notifications":[{"severity":"INFO","messageFormat":"The parameters should be grouped with curly braces: {}.","syntaxPosition":{"start":{"column":25,"index":170,"line":4},"end":{"column":34,"index":179,"line":4}},"messageFormatSpecifierTypes":[],"arguments":[],"notificationType":"PARAMETERS_SHOULD_BE_GROUPED","message":"The parameters should be grouped with curly braces: {}."}],"queryId":"b86dd9fd-ebb5-488e-80fc-2a2161496711","sampled":false}},"types":[{"mappings":{"user_agent":{"type":"string"},"count()":{"type":"long"}},"indexRange":[0,3]}]},"notifications":[{"message":"The parameters should be grouped with curly braces: {}.","severity":"info","notificationType":"PARAMETERS_SHOULD_BE_GROUPED"}],"querySettings":{"maxResultRecords":1000,"defaultScanLimitGbytes":500,"maxResultMegaBytes":1,"defaultSamplingRatio":10,"enableSampling":false},"dateTime":"2025-01-02T14:14:38.825Z","input":{"timeframe":{"from":"now()-7d","to":"now()"},"value":"fetch logs\n| filter matchesPhrase(content, \"user_agent\")\n| fieldsAdd user_agent =  parse(content, \"\"\"LD '\"user_agent\":\"' DATA:user_agent '\"' \"\"\")\n| summarize count(), by:user_agent"}},"visualizationSettings":{"thresholds":[],"chartSettings":{"xAxisScaling":"analyzedTimeframe","gapPolicy":"gap","circleChartSettings":{"groupingThresholdType":"relative","groupingThresholdValue":0,"valueType":"relative"},"categoryOverrides":{},"curve":"linear","pointsDisplay":"auto","categoricalBarChartSettings":{"layout":"vertical","categoryAxisTickLayout":"horizontal","scale":"absolute","groupMode":"stacked","colorPaletteMode":"multi-color","categoryAxis":["user_agent"],"categoryAxisLabel":"user_agent","valueAxis":["count()"],"valueAxisLabel":"count()","tooltipVariant":"single"},"colorPalette":"categorical","valueRepresentation":"absolute","truncationMode":"middle"},"singleValue":{"showLabel":true,"label":"user_agent","prefixIcon":"","recordField":"user_agent","autoscale":true,"alignment":"center","trend":{"trendType":"auto","isVisible":true},"colorThresholdTarget":"value"},"table":{"rowDensity":"condensed","enableSparklines":false,"hiddenColumns":[],"linewrapEnabled":false,"lineWrapIds":[],"monospacedFontEnabled":false,"monospacedFontColumns":[],"firstVisibleRowIndex":0,"columnWidths":{},"columnTypeOverrides":[]},"honeycomb":{"shape":"hexagon","legend":{"hidden":false,"position":"auto"},"displayedFields":["user_agent"],"dataMappings":{"value":"count()"},"truncationMode":"middle","colorMode":"color-palette","colorPalette":"blue"},"histogram":{"legend":"auto","yAxis":{"label":"Frequency","scale":"linear"},"colorPalette":"categorical","dataMappings":[{"valueAxis":"count()","rangeAxis":""}],"variant":"single","truncationMode":"middle","displayedFields":["user_agent"]}},"state":"success"},"previousFilterSegments":[]}],"defaultSegments":[]}